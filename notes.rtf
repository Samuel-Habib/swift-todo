{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red93\green108\blue121;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\partightenfactor0

\f0\fs24 \cf2 \cb3 //struct todoItems: View\{\cf4 \
\cf2 //    // get from model: how many items there are\cf4 \
\cf2 //    /* why doesn't this work? private var column = [GridItem(.flexible(), spacing: 5),[GridItem(.flexible(), spacing: 5)]\cf4 \
\cf2 //     */\cf4 \
\cf2 //    private var column = [\cf4 \
\cf2 //        GridItem(.fixed(50:50),\cf4 \
\cf2 //        GridItem(.fixed(70:50)\cf4 \
\cf2 //    ]\cf4 \
\cf2 //    \cf4 \
\cf2 //    let roundedRect = RoundedRectangle(cornerRadius: 12)\cf4 \
\cf2 //    let sR = 50\cf4 \
\cf2 //    var body: some View\{\cf4 \
\cf2 //        ScrollView\{\cf4 \
\cf2 //                Text("hello")\cf4 \
\cf2 //            LazyVGrid(columns:column)\{\cf4 \
\cf2 //                ForEach(0...3, id: \\.self)\{ index in\cf4 \
\cf2 //                    roundedRect\cf4 \
\cf2 //                \}\cf4 \
\cf2 //            \}\cf4 \
\cf2 //        \}\cf4 \
\cf2 //    \}\cf4 \
\cf2 //\}\cf4 \
        \
\cf2 //struct TodoItems: View \{\cf4 \
\cf2 //    // Define your grid items\cf4 \
\cf2 //    private var columns: [GridItem] = [\cf4 \
\cf2 //        GridItem(.flexible(), spacing: 5),\cf4 \
\cf2 //        GridItem(.flexible(), spacing: 5)\cf4 \
\cf2 //    ]\cf4 \
\cf2 //    \cf4 \
\cf2 //    let roundedRect = RoundedRectangle(cornerRadius: 12)\cf4 \
\cf2 //    \cf4 \
\cf2 //    var body: some View \{\cf4 \
\cf2 //        GeometryReader \{ index in\cf4 \
\cf2 //        // GeometryReader is used to get the size of the parent view\cf4 \
\cf2 //                HStack\{\cf4 \
\cf2 //                    roundedRect\cf4 \
\cf2 //                        .fill(.blue)\cf4 \
\cf2 //                        .frame(width: index.size.width * 0.75)\cf4 \
\cf2 //                    /* once we get the size of the parent view, we can scale the rectangles to match our prefereed horizontal frame */\cf4 \
\cf2 //                    roundedRect\cf4 \
\cf2 //                        .fill(.green)\cf4 \
\cf2 //                        .frame(width: index.size.width * 0.25)\cf4 \
\cf2 //                \}.frame(height: index.size.height*0.1)\cf4 \
\cf2 //                /* this is the same thing but for vertical*/\cf4 \
\cf2 //\cf4 \
\cf2 //                    \cf4 \
\cf2 //        \}.padding()\cf4 \
\cf2 //    \}\cf4 \
\cf2 //\
\
VStack\{\
Image(\
\
\}}